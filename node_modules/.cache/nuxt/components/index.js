export const BaseBackground = () => import('../../../../components/BaseBackground.vue' /* webpackChunkName: "components/base-background" */).then(c => wrapFunctional(c.default || c))
export const BaseBlock = () => import('../../../../components/BaseBlock.vue' /* webpackChunkName: "components/base-block" */).then(c => wrapFunctional(c.default || c))
export const BaseLayoutModifier = () => import('../../../../components/BaseLayoutModifier.vue' /* webpackChunkName: "components/base-layout-modifier" */).then(c => wrapFunctional(c.default || c))
export const BaseNavigation = () => import('../../../../components/BaseNavigation.vue' /* webpackChunkName: "components/base-navigation" */).then(c => wrapFunctional(c.default || c))
export const BasePageHeading = () => import('../../../../components/BasePageHeading.vue' /* webpackChunkName: "components/base-page-heading" */).then(c => wrapFunctional(c.default || c))
export const TopNavigation = () => import('../../../../components/TopNavigation.vue' /* webpackChunkName: "components/top-navigation" */).then(c => wrapFunctional(c.default || c))
export const ChartjsBar = () => import('../../../../components/Chartjs/Bar.vue' /* webpackChunkName: "components/chartjs-bar" */).then(c => wrapFunctional(c.default || c))
export const ChartjsDoughnut = () => import('../../../../components/Chartjs/Doughnut.vue' /* webpackChunkName: "components/chartjs-doughnut" */).then(c => wrapFunctional(c.default || c))
export const ChartjsLine = () => import('../../../../components/Chartjs/Line.vue' /* webpackChunkName: "components/chartjs-line" */).then(c => wrapFunctional(c.default || c))
export const ChartjsPie = () => import('../../../../components/Chartjs/Pie.vue' /* webpackChunkName: "components/chartjs-pie" */).then(c => wrapFunctional(c.default || c))
export const ChartjsPolarArea = () => import('../../../../components/Chartjs/PolarArea.vue' /* webpackChunkName: "components/chartjs-polar-area" */).then(c => wrapFunctional(c.default || c))
export const ChartjsRadar = () => import('../../../../components/Chartjs/Radar.vue' /* webpackChunkName: "components/chartjs-radar" */).then(c => wrapFunctional(c.default || c))
export const CommonButton = () => import('../../../../components/common/Button.vue' /* webpackChunkName: "components/common-button" */).then(c => wrapFunctional(c.default || c))
export const CommonModal = () => import('../../../../components/common/Modal.vue' /* webpackChunkName: "components/common-modal" */).then(c => wrapFunctional(c.default || c))
export const CommonTable = () => import('../../../../components/common/Table.vue' /* webpackChunkName: "components/common-table" */).then(c => wrapFunctional(c.default || c))
export const CommonEDropdown = () => import('../../../../components/common/eDropdown.vue' /* webpackChunkName: "components/common-e-dropdown" */).then(c => wrapFunctional(c.default || c))
export const CommonPagination = () => import('../../../../components/common/pagination.vue' /* webpackChunkName: "components/common-pagination" */).then(c => wrapFunctional(c.default || c))
export const CommonResetBtn = () => import('../../../../components/common/reset_btn.vue' /* webpackChunkName: "components/common-reset-btn" */).then(c => wrapFunctional(c.default || c))
export const CommonRowsFilter = () => import('../../../../components/common/rowsFilter.vue' /* webpackChunkName: "components/common-rows-filter" */).then(c => wrapFunctional(c.default || c))
export const CommonStatusButton = () => import('../../../../components/common/status_button.vue' /* webpackChunkName: "components/common-status-button" */).then(c => wrapFunctional(c.default || c))
export const CommonSubmitButton = () => import('../../../../components/common/submit_button.vue' /* webpackChunkName: "components/common-submit-button" */).then(c => wrapFunctional(c.default || c))

// nuxt/nuxt.js#8607
function wrapFunctional(options) {
  if (!options || !options.functional) {
    return options
  }

  const propKeys = Array.isArray(options.props) ? options.props : Object.keys(options.props || {})

  return {
    render(h) {
      const attrs = {}
      const props = {}

      for (const key in this.$attrs) {
        if (propKeys.includes(key)) {
          props[key] = this.$attrs[key]
        } else {
          attrs[key] = this.$attrs[key]
        }
      }

      return h(options, {
        on: this.$listeners,
        attrs,
        props,
        scopedSlots: this.$scopedSlots,
      }, this.$slots.default)
    }
  }
}
